.. _csharp-serialize-bson:


==============
Serialize BSON
==============

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In the {+driver-long+}, **:wikipedia:`serialization <Serialization>`** is the process of 
mapping a {+language+} object to a BSON document. Reading and Writing BSON/JSON 
demonstrates how to manually read and write BSON and JSON. However, using the 
serialization classes make this process much easier.


Create a Serializer
-------------------

There are many serializers already built for handling primitive types, collection types, 
and custom classes. 

The following code sample shows how to use ``BsonDocumentSerializer`` to read a BSON 
file into a ``BsonDocument`` object:

string inputFileName = "myFile.bson";

using (var stream = File.OpenRead(inputFileName))
using (var reader = new BsonReader(inputFileName))
{
    var context = BsonDeserializationContext.CreateRoot(reader);
    BsonDocument doc = BsonDocumentSerializer.Instance.Deserialize(context);

Serializer Registry
The serializer registry contains all the IBsonSerializers that have been registered. 
It can be accessed via the SerializerRegistry property of the static class BsonSerializer.

.. note::
   The serializer registry is global. You can't use multiple serializer registries in a 
   single application.


Serialization Provider

The serializer registry is backed by a list of IBsonSerializationProvider objects. 
A **serialization provider** is an object that returns a serializer, allowing you to
provide serializers on demand. 

You must register a serialization provider before you can use it.

Implementation
--------------

To create a serialization provider, define a class that implements the 
``IBsonSerializationProvider`` interface. This interface requires
one method, ``GetSerializer``, that returns a serializer for every type you're able
to handle and ``null`` for any type your provider isn't prepared to handle. 

The following code sample shows one way to implement ``IBsonSerializationProvider``.
If the ``type`` parameter is an ``int`` (the type to be serializer is an integer),
the ``GetSerializer`` method returns an instance of ``MyInt32Serializer``. If ``type``
is any other type, the method returns ``null`` and the next ``IBsonSerializationProvider``
handles the request. 

.. code-block:: csharp
    
   class MyProvider : IBsonSerializationProvider
   {
       public IBsonSerializer GetSerializer(Type type)
       {
           if (type == typeof(int))
           {
               return new MyInt32Serializer();
           }        

           return null;
       }
   }

}

Implementation

.. warning::
   Writing custom serializers to handle both normal cases and edge cases can be 
   tricky.

To create a custom serializer to handle a complex type, define a class that implements 
the ``IBsonSerializer`` interface. It is simplest to inherit from ``SerializerBase<T>``
and override the ``Serialize`` and ``Deserialize`` methods. 

The following code sample shows how to implement the ``Serialize`` method 
for the ``int`` type:

class MyInt32Serializer : SerializerBase<int>
{
    public override void Serialize(BsonSerializationContext context, BsonSerializationArgs args, int value)
    {
        context.Writer.WriteInt32(value);
    }
}

The ``Deserialize`` method should take into account other BSON types before reading the
data. In the case of an ``int``, the value could be an ``Int32``, ``Int64``, ``double``,
or ``string``. The following code sample shows how to implement the ``Deserialize``
method to account for these possibilities:

class MyInt32Serializer : SerializerBase<int>
{
    public override int Deserialize(BsonDeserializationContext context, BsonDeserializationArgs args)
    {
        var type = context.Reader.GetCurrentBsonType();
        switch (type)
        {
            case BsonType.Int32:
                return context.Reader.ReadInt32();
            case BsonType.Int64:
                return Convert.ToInt32(context.Reader.ReadInt64());
            case BsonType.Double:
                return Convert.ToInt32(context.Reader.ReadDouble());
            case BsonType.String:
                return int.Parse(context.Reader.ReadString());
            default:
                var message = string.Format("Cannot convert a {0} to an Int32.", type);
                throw new NotSupportedException(message);
        }
    }
}

.. warning::
   Since some of these conversions could result in an overflow or truncation, exceptions 
   may still be thrown.

.. tip::
   The built-in ``Int32Serializer`` accounts for this as well as other such items.

You can register your serializer using the RegisterSerializer or implement a 
serialization provider.

Opt-in Interfaces
There are some opt-in interfaces that allow the driver to utilize your custom serializer in special ways. You should evaluate these interfaces and decide whether your serializer should implement them.

IBsonIdProvider
If your class is used as a root document, you should implement the IBsonIdProvider interface in order for "Inserting" the document to function best, especially if the class your serializer is for uses an Id type other than ObjectId.

IBsonDocumentSerializer
In order to enable the driver to properly construct type-safe queries using a custom serializer, it needs access to member information. If your custom serializer is for a class, then you should implement IBsonDocumentSerializer.

class MyClass
{
    public ObjectId Id { get; set; }

    public string FirstName { get; set; }

    public string LastName { get; set; }
}

class MyClassSerializer : SerializerBase<MyClass>, IBsonDocumentSerializer
{
    // implement Serialize and Deserialize

    public bool TryGetMemberSerializationInfo(string memberName, out BsonSerializationInfo serializationInfo)
    {
        switch (memberName)
        {
            case "Id":
                serializationInfo = new BsonSerializationInfo("_id", new ObjectIdSerializer(), typeof(ObjectId));
                return true;
            case "FirstName":
                serializationInfo = new BsonSerializationInfo("fn", new StringSerializer(), typeof(string));
                return true;
            case "LastName":
                serializationInfo = new BsonSerializationInfo("ln", new StringSerializer(), typeof(string));
                return true;
            default:
                serializationInfo = null;
                return false;
        }
    }
}
Above, we are providing information about the members of our class based on the member name. This enables the driver to, for instance, translate the below lambda expression into { fn: 'Jack' }.

Find(x => x.FirstName == "Jack")
IBsonArraySerializer
In the same way, if you have written a custom collection serializer, you should implement IBsonArraySerializer.