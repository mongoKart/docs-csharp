.. _csharp-authentication-mechanisms:

=========================
Authentication Mechanisms
=========================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this guide, you can learn how to authenticate with MongoDB using the
**authentication mechanisms** available in the {+mongo-community+}.
Authentication mechanisms are processes by which the driver and server confirm
the identity of a client to ensure security before connecting.

You can use the following authentication mechanisms with the latest version
of {+mongo-community+}:

- :ref:`csharp-scram-sha-256`
- :ref:`csharp-scram-sha-1`
- :ref:`csharp-aws`
- :ref:`csharp-x509`

To authenticate using ``GSSAPI/Kerberos`` or ``LDAP``, see the
:ref:`csharp-enterprise-authentication-mechanisms` fundamentals page. For more 
information on establishing a connection to your MongoDB cluster, see the
:ref:`csharp-connect-to-mongodb`.

Specify an Authentication Mechanism
-----------------------------------

You can specify your authentication mechanism and credentials when connecting to
MongoDB using either of the following methods:

- A **connection string**, also known as a **connection URI**, which is a string
  that tells the driver how to connect to a MongoDB deployment and how to behave while
  connected.

- A factory method for the supported authentication mechanism, contained in the 
  ``MongoCredential`` class.

Mechanisms
----------

The following examples specify authentication mechanisms using the following
placeholders:

- ``<username>``: Your MongoDB username.
- ``<password>``: Your MongoDB user's password.
- ``<hostname>``: The network address of your MongoDB server, accessible by your client.
- ``<port>``: The port number of your MongoDB server.
- ``<authenticationDb>``: The MongoDB database that contains your user's authentication
  data. If you omit this parameter, the driver uses the default value ``admin``.

.. _csharp-authentication-default:

Default
~~~~~~~

The default authentication mechanism setting uses one of the following
authentication mechanisms, depending on which MongoDB versions your server supports:

- ``SCRAM-SHA-256``
- ``SCRAM-SHA-1``
- ``MONGODB-CR``

.. note::

   MongoDB version 4.0 uses SCRAM as the default mechanism, and no longer
   supports ``MONGODB-CR``.


Select the :guilabel:`Connection String` or :guilabel:`MongoCredential` tab to
see the corresponding syntax for specifying the default authentication mechanism:

.. tabs::

   .. tab:: Connection String
      :tabid: default-connection-string

      .. code-block:: csharp

         var mongoClient = new MongoClient("mongodb://<username>:<password>@<hostname>:<port>/?authSource=<authenticationDb>");

   .. tab:: MongoCredential
      :tabid: default-mongo-credential

      .. code-block:: csharp

         var credential = MongoCredential.CreateCredential("<authenticationDb>", "<username>", "<password>");
         var settings = MongoClientSettings.FromConnectionString("<connection string>");
         settings.Credential = credential;
         var mongoClient = new MongoClient(settings);

.. _csharp-scram-sha-256:

SCRAM-SHA-256
~~~~~~~~~~~~~

``SCRAM-SHA-256`` is a salted challenge-response authentication mechanism (SCRAM)
that uses your username and password, encrypted with the ``SHA-256`` algorithm,
to authenticate your user.

You can specify the ``SCRAM-SHA-256`` authentication mechanism with your connection
string as follow:

.. code-block:: csharp

   var mongoClient = new MongoClient("mongodb://<username>:<password>@<hostname>:<port>/?authSource=<authenticationDb>&authMechanism=SCRAM-SHA-256"); 

.. tip:: Default Mechanism

   MongoDB version 4.0 and later uses ``SCRAM-SHA-256`` as the default 
   authentication mechanism if the MongoDB server version supports it.

   To learn more on specifying the default mechanism, see :ref:`csharp-authentication-default`.

.. _csharp-scram-sha-1:

SCRAM-SHA-1
~~~~~~~~~~~

``SCRAM-SHA-1`` is s a salted challenge-response mechanism (SCRAM) that uses 
your username and password, encrypted with the ``SHA-1`` algorithm, to authenticate 
your user.

You can specify the ``SCRAM-SHA-1`` authentication mechanism with your connection
string as follow:

.. code-block:: csharp

   var mongoClient = new MongoClient("mongodb://<username>:<password>@<hostname>:<port>/?authSource=<authenticationDb>&authMechanism=SCRAM-SHA-1");

.. tip:: Default Mechanism

   MongoDB version 4.0 uses ``SCRAM-SHA-1`` as the default authorization mechanism
   if the server does not support ``SCRAM-SHA-256``.

   To learn more on specifying the default mechanism, see :ref:`csharp-authentication-default`.

.. _csharp-mongodb-aws:

MONGODB-AWS
~~~~~~~~~~~

.. note::

   The ``MONGODB-AWS`` authentication mechanism is available for
   MongoDB deployments on MongoDB Atlas.

The ``MONGODB-AWS`` authentication mechanism uses your Amazon Web Services
Identity and Access Management (AWS IAM) credentials to authenticate your
user. To learn more about configuring MongoDB Atlas, see the
:atlas:`Set Up Passwordless Authentication with AWS IAM Roles </security/passwordless-authentication/#set-up-passwordless-authentication-with-aws-iam-roles>` guide.

To instruct the driver to use this authentication mechanism, you can specify
``MONGODB-AWS`` either as a parameter in the connection string or by using
the ``MongoCredential`` constructor and passing "MONGODB-AWS" as the authentication mechanism.

Learn how to provide your AWS IAM credentials by specifying them in environment variables 
or on your ``MongoClientSettings`` object in the next sections.

These sections contain code examples that use the following placeholders:

* ``awsKeyId`` - value of your AWS access key ID
* ``awsSecretKey`` - value of your AWS secret access key
* ``atlasUri`` - hostname and port of your MongoDB Atlas deployment
* ``awsSessionToken`` - value of your AWS session token

.. important::

   The {+driver-short+} will check for AWS IAM credentials in the order listed here.

Specify Your Credentials in MongoClientSettings
+++++++++++++++++++++++++++++++++++++++++++++++

You can supply your AWS IAM credentials on a ``MongoClientSettings`` object either by 
using a ``MongoCredential`` instance or as part of the connection string.

To use a ``MongoClientSettings`` object for ``MONGODB-AWS`` authentication, 
you must perform the following steps:

1. Specify the authentication mechanism and name of the database to authenticate against
#. Supply the credentials

To specify the authentication mechanism and authentication database by using a
``MongoCredential``, create a ``MongoCredential`` instance and add it to your
``MongoClientSettings`` as shown in the following example:

.. code-block:: csharp

   var awsCredentials = new MongoCredential("MONGODB-AWS", new MongoExternalIdentity("<awsKeyId>"), new PasswordEvidence("<awsSecretKey>"));

   var mongoClientSettings = MongoClientSettings.FromConnectionString("mongodb+srv://<atlasUri>");
   mongoClientSettings.Credential = awsCredentials;
   var client = new MongoClient(mongoClientSettings);

.. note:: AWS Session Token in MongoCredential

   To specify an AWS session token as part of the ``MongoCredential``, call the
   ``WithMechanismProperty()`` method on the ``MongoCredential`` object and pass in the
   token, as shown in the following example:

   .. code-block:: csharp

      var awsCredentials = new MongoCredential("MONGODB-AWS", new MongoExternalIdentity("<awsKeyId>"), new PasswordEvidence("<awsSecretKey>"))
          .WithMechanismProperty("AWS_SESSION_TOKEN", "<awsSessionToken>");

To specify the authentication mechanism and authentication database in the connection
string, add them as parameters as shown in the following example:

.. code-block:: csharp

   var connectionString = "mongodb+srv://<awsKeyId>:<awsSecretKey>@<atlasUri>?authSource=$external&authMechanism=MONGODB-AWS";
   var mongoClientSettings = MongoClientSettings.FromConnectionString(connectionString);
   var client = new MongoClient(mongoClientSettings);

.. note:: AWS Session Token in the Connection String

   To specify an AWS session token as part of the connection string, add it as a 
   parameter as shown in the following example:

   .. code-block:: csharp

      var connectionString = "mongodb+srv://<awsKeyId>:<awsSecretKey>@<atlasUri>?authSource=$external&authMechanism=MONGODB-AWS&authMechanismProperties=AWS_SESSION_TOKEN:<awsSessionToken>";
      var mongoClientSettings = MongoClientSettings.FromConnectionString(connectionString);
      var client = new MongoClient(mongoClientSettings);

Specify Your Credentials in the Environment
+++++++++++++++++++++++++++++++++++++++++++

You can instruct the driver to automatically retrieve your AWS IAM credentials 
from the environment by setting the appropriate environment variables.

To use environment variables to supply your credentials, you must perform
the following steps:

1. Specify the authentication mechanism and name of the database to authenticate against
#. Set the appropriate environment variables

You can specify the authentication mechanism and authentication database 
by using a ``MongoCredential`` or as part of the connection string.

To specify the authentication mechanism and authentication database by using a 
``MongoCredential``, create a ``MongoCredential`` instance and add it to your 
``MongoClient`` as shown in the following example:

.. code-block:: csharp

   var mongoClientSettings = MongoClientSettings.FromConnectionString("mongodb+srv://<atlasUri>");
   mongoClientSettings.Credential = new MongoCredential("MONGODB-AWS", new MongoExternalAwsIdentity(), new ExternalEvidence());
   var client = new MongoClient(mongoClientSettings);

To specify the authentication mechanism and authentication database in the connection 
string, add them as parameters as shown in the following example:

.. code-block:: csharp

   var connectionString = "mongodb+srv://<atlasUri>?authMechanism=MONGODB-AWS&authSource=$external";
   var mongoClientSettings = MongoClientSettings.FromConnectionString(connectionString);
   var client = new MongoClient(mongoClientSettings);

After specifying the authentication mechanism and database, you must set the 
environment variables required for the type of authentication the driver will perform. 
The next examples show how to provide your credentials by 
setting environment variables for the following types of authentication:

* Web identity provider
* `Local configuration <https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-files.html>`__
* Programmatic access keys
* ECS container credentials
* EC2 container credentials


To authenticate by using a **web identity provider**, such as any OpenID Connect-compatible
identity provider, 
create a file that contains your OpenID Connect (OIDC) token, then set the path to 
this file in an environment variable by using ``bash`` or a similar shell as shown in
the following example:

.. code-block:: bash

   export AWS_WEB_IDENTITY_TOKEN_FILE=<path to file containing your OIDC token>

You can use this to authenticate to Elastic Kubernetes Service (EKS) and other services.

The following examples show how you can set your **programmatic access keys**
in environment variables by using ``bash`` or a similar shell:

.. code-block:: bash

   export AWS_ACCESS_KEY_ID=<awsKeyId>
   export AWS_SECRET_ACCESS_KEY=<awsSecretKey>
   export AWS_SESSION_TOKEN=<awsSessionToken>

.. note::
   
   Omit the line containing ``AWS_SESSION_TOKEN`` if you don't need an AWS
   session token for that role.

To authenticate by using **ECS container credentials**, set the ECS-endpoint-relative 
URI in an environment variable by using ``bash``
or a similar shell as shown in the following example:

.. code-block:: bash

   export AWS_CONTAINER_CREDENTIALS_RELATIVE_URI=<your ECS endpoint>

To authenticate by using **EC2 container credentials**, make sure none of the
aforementioned environment variables are set. The driver obtains the
credentials from the default IPv4 EC2 instance metadata endpoint.   

.. _csharp-x509:

X.509
~~~~~

The ``X.509`` authentication mechanism uses :wikipedia:`TLS <Transport_Layer_Security>`
with ``X.509`` certificates to authenticate your user, identified by the
distinguished names of your client certificate. When you specify the 
``X.509`` authentication mechanism, the server authenticates the connection using 
the subject name of the client certificate.

To learn more about using TLS/SSL, see our :ref:`TLS/SSL guide <csharp-tls>`.

To learn more about ``X.509`` certificates, see the :ref:`X.509 Server Manual Entry <x509-client-authentication>`.

Select the :guilabel:`Connection String` or :guilabel:`MongoCredential` tab to
see the corresponding syntax for specifying the ``X.509`` authentication mechanism:

.. tabs::

   .. tab:: Connection String
      :tabid: default-connection-string

      .. code-block:: csharp

         var connectionString = "mongodb://<hostname>/?authMechanism=MONGODB-X509";
         var settings = MongoClientSettings.FromConnectionString(connectionString);

         settings.useTls = true;
         settings.SslSettings = new SslSettings
         {
            ClientCertificates = new List<X509Certificate>()
            {
                new X509Certificate2("<path to X.509 certificate>", "<X.509 certificate password>")
            }
         };

   .. tab:: MongoCredential
      :tabid: default-mongo-credential

      .. code-block:: csharp

         var credential = MongoCredential.CreateMongoX509Credential("<X.509 certificate username>")
         var settings = new MongoClientSettings 
         {
             Credential =  credential
             SslSettings = new SslSettings
             {
                 ClientCertificates = new List<X509Certificate>()
                 {
                     new X509Certificate2("<path to X.509 certificate>", "<X.509 certificate password>")
                 },
             },
             UseTls = true,
             Server = new MongoServerAddress("<hostname", "<port>"),
         };

      .. note:: Certificate Type

         Your certificate must be a :wikipedia:`PCKS #12<PKCS_12>` type certificate
         with a ``.p12`` extension.

      .. tip:: Username parameter

         The username parameter provided to ``CreateMongoX509Credential`` must
         match the distinguished subject name of your ``X.509`` certificate exactly.
         You can alternatively pass ``null`` as the parameter to prompt the MongoDB
         server to infer the username based on your ``X.509`` certificate.

API Documentation
-----------------

To learn more about any of the methods or types discussed in this
guide, see the following API Documentation:

- `MongoCredential() <{+api-root+}/T_MongoDB_Driver_MongoCredential.htm>`__
- `MongoClient() <{+api-root+}/T_MongoDB_Driver_MongoClient.htm>`__
- `MongoClientSettings <{+api-root+}/T_MongoDB_Driver_MongoClientSettings.htm>`__
- `CreateCredential() <{+api-root+}/M_MongoDB_Driver_MongoCredential_CreateCredential_1.htm>`__
- `CreateMongoX509Credential() <{+api-root+}/M_MongoDB_Driver_MongoCredential_CreateMongoX509Credential.htm>`__
