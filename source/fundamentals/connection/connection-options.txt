.. _csharp-connection-options:

==================
Connection Options
==================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

This section describes the MongoDB connection and authentication options
available in the {+driver-short+}. You can configure your connection using either 
the connection URI or a ``MongoClientSettings`` object.

----------------------------------
Using the Connection URI
----------------------------------

If you pass a connection URI to the ``MongoClient`` constructor, you can include
connection options in the string as ``<name>=<value>`` pairs. In the following example,
the connection URI contains the ``connectTimeoutMS`` option with a value of ``60000``
and the ``tls`` option with a value of ``true``: 

.. literalinclude:: /includes/fundamentals/code-examples/connection/LocalConnectionConfig.cs
   :language: csharp
   :dedent:

-----------------------------
Using ``MongoClientSettings`` 
-----------------------------

You can use a ``MongoClientSettings`` object to configure connection settings in code
rather than in a connection URI. Configuring the connection this way makes it easier to 
change settings at runtime, helps you catch errors during compilation, and provides 
more configuration options than the connection URI.

To use a ``MongoClientSettings`` object, create an instance of the class, set 
its properties, and pass it as an argument to the ``MongoClient`` constructor. 
In the following example, 

.. literalinclude:: /includes/fundamentals/code-examples/connection/MongoClientSettingsConfig.cs
   :language: csharp
   :dedent:

Connection Options
------------------

The following table lists each connection option available in the
``MongoClientSettings`` class and, if possible, how to achieve the same result in 
the connection string. If a ``MongoClientSettings`` property maps to more than one 
option in the connection string, the **Connection URI Example** column shows all 
relevant options. 

.. list-table::
   :header-rows: 1
   :widths: 1 1 1 1 1

   * - ``MongoClientSettings`` Property
     - Description
     - Data Type
     - Default Value
     - Connection URI Example

   * - **AllowInsecureTls**
     - Specifies whether to relax TLS constraints as much as possible. This can include 
       allowing invalid certificates or hostname mismatches.
     - {+bool-data-type+}
     - ``false``
     - ``tlsInsecure=true``

   * - **ApplicationName**
     - The app name the driver passes to the server in the client metadata as part of 
       the connection handshake. The server prints this value to the MongoDB logs once 
       the connection is established. The value is also recorded in the slow query logs 
       and profile collections.
     - {+string-data-type+}
     - ``null``
     - ``appName=yourApp``

   * - **AutoEncryptionOptions**
     - Settings for automatic client-side encryption.
     - ``AutoEncryptionOptions``
     - ``null``
     - {+not-available+}

   * - **ClusterConfigurator**
     - Low-level configuration options for sockets, TLS, cluster, and others. 
     - ``Action<ClusterBuilder>``
     - ``null``
     - {+not-available+}

   * - **Compressors**
     - The preferred compression types, in order, for wire-protocol messages sent to 
       or received from the server. The driver uses the first of these compression types 
       that the server supports. See :ref:`csharp-network-compression` for 
       more information.
     - ``CompressorConfiguration``
     - ``null``
     - ``compressors=snappy,zstd``

   * - **ConnectTimeout**
     - The length of time the driver tries to establish a single TCP socket connection 
       to the server before timing out. Specifying ``0`` disables the connection timeout.
     - ``TimeSpan``
     - 30 seconds
     - ``connectTimeoutMS=0``

   * - **Credential**
     - Settings for how the driver authenticates to the server. This includes 
       authentication credentials, mechanism, source, and other settings.

       If you don't specify an authentication mechanism, the driver uses either 
       ``SCRAM-SHA-1`` or ``SCRAM-SHA-256``, depending on the server version. See
       :ref:`authentication mechanisms <csharp-authentication-mechanisms>` for available
       authentication mechanisms.
     - ``MongoCredentialStore``
     - ``null``
     - .. code-block:: none
        :copyable: false
        :source: none
     
        mongodb://user1:password1@sample.host:27017/?authMechanism=GSSAPI
        &authMechanismProperties=SERVICE_NAME:other,CANONICALIZE_HOST_NAME:true
        &authSource=$external

   * - **DirectConnection**
     - Specifies whether to force dispatch **all** operations to the host.
     - {+bool-data-type+}
     - ``false``
     - ``directConnection=true``

   * - **HeartbeatInterval**
     - The interval between regular server-monitoring checks. Must be greater than or 
       equal to 500 milliseconds.
     - ``TimeSpan``
     - 10 seconds
     - ``heartbeatFrequencyMS=5000``

   * - **HeartbeatTimeout**
     - The length of time a monitoring socket can be idle before timing out.
     - ``TimeSpan``
     - Same as ``ConnectTimeout``
     - {+not-available+}
     
   * - **IPv6**
     - Specifies whether the host address is in IPv6 format.
     - {+bool-data-type+}
     - ``false``
     - {+not-available+}

   * - **IsFrozen**
     - Indicates whether the settings have been frozen. Frozen settings can't be changed.
     - {+bool-data-type+}
     - ``false``
     - {+not-available+}

   * - **LinqProvider**
     - The LINQ provider to use.
     - ``LinqProvider``
     - ``LinqProvider.V2``
     - {+not-available+}

   * - **LoadBalanced**
     - Specifies whether the driver is connecting to a load balancer.
     - {+bool-data-type+}
     - ``false``
     - ``loadBalanced=true``

   * - **LocalThreshold**
     - The latency window for server eligibility. If a server's round trip takes longer 
       than the fastest server's round-trip time plus this value, the server isn't 
       eligible for selection. Specifying ``0`` selects the fastest eligible server.
     - ``TimeSpan``
     - 15 milliseconds
     - ``localThresholdMS=0``

   * - **MaxConnecting**
     - The greatest number of connections a driver's connection pool may be 
       establishing concurrently.
     - ``int``
     - ``2``
     - ``maxConnecting=3``

   * - **MaxConnectionIdleTime**
     - The length of time a connection can be idle before the driver closes it. 
       Specifying ``0`` means no maximum.
     - ``TimeSpan``
     - 10 minutes
     - ``maxIdleTimeMS=300000``

   * - **MaxConnectionLifeTime**
     - The length of time a connection can be pooled before expiring.
     - ``TimeSpan``
     - 30 minutes
     - {+not-available+}

   * - **MaxConnectionPoolSize**
     - The greatest number of clients or connections the driver can create in its 
       connection pool. This count includes connections in use.
     - {+int-data-type+}
     - ``100``
     - ``maxPoolSize=150``

   * - **MinConnectionPoolSize**
     - The number of connections the driver should create and keep in the connection 
       pool even when no operations are occurring. This count includes connections 
       in use.
     - {+int-data-type+}
     - ``0``
     - ``minPoolSize=1``

   * - **ReadConcern**
     - The client's default read concern. 
       See :ref:`read concern <read-concern>` for more information.
     - ``ReadConcern``
     - ``Default``
     - ``readConcernLevel=local``

   * - **ReadEncoding**
     - Specifies whether UTF-8 string deserialization is strict or lenient. 
       Strict encoding will throw an exception when an invalid UTF-8 byte sequence 
       is encountered. 
     - ``UTF8Encoding``
     - Strict encoding
     - {+not-available+}

   * - **ReadPreference**
     - The client's default read-preference settings. ``MaxStaleness`` represents the 
       longest replication lag, in wall-clock time, that a secondary can experience and 
       still be eligible for server selection. Specifying ``-1`` means no maximum.
       See :ref:`read preference <read-preference>` for more information.
     - ``ReadPreference``
     - ``Primary``
     - .. code-block:: language
     
        readPreference=primaryPreferred
        &maxStalenessSeconds=90
        &readPreferenceTags=dc:ny,rack:1

       You can include the ``readPreferenceTags`` parameter in the connection URI more 
       than once. If you do, the client treats each instance as a separate tag set. 
       The order of the tags in the URI determines the order for read preference. You can
       use this parameter only if the read-preference mode is not ``primary``.

   * - **ReplicaSetName**
     - The name of the replica set to connect to.
     - {+string-data-type+}
     - ``null``
     - ``replicaSet=yourReplicaSet``

   * - **RetryReads**
     - Enables retryable reads.
     - {+bool-data-type+}
     - ``true``
     - ``retryReads=false``

   * - **RetryWrites**
     - Enables retryable writes.
     - {+bool-data-type+}
     - ``true``
     - ``retryWrites=false``

   * - **Scheme**
     - Specifies whether to use the standard connection string format (``MongoDB``) 
       or the DNS seed list format (``MongoDBPlusSrv``). 
       See :manual:`the MongoDB Manual</reference/connection-string/>` for more 
       information about connection string formats. 
     - ``ConnectionStringScheme``
     - ``MongoDB``
     - ``mongodb+srv://``

   * - **SdamLogFilename**
     - The name of the SDAM (Server Discovery and Monitoring) log file.
     - {+string-data-type+}
     - ``null``
     - {+not-available+}

       TODO: Link to Monitoring page when finished

   * - **Server**
     - The host and port number where MongoDB is running.
     - ``MongoServerAddress``
     - ``localhost:27017``
     - ``mongodb://sample.host:27017``

   * - **ServerApi**
     - Allows opting into Stable API versioning. See 
       :manual:`the MongoDB Manual</reference/stable-api>` for more information about
       Stable API versioning.
     - ``ServerApi``
     - ``null``
     - {+not-available+}

   * - **Servers**
     - The cluster members where MongoDB is running. 
     - ``List<MongoServerAddress>``
     - ``localhost:27017``
     - ``mongodb://sample.host1:27017,sample.host2:27017,sample.host3:27017``
     
   * - **ServerSelectionTimeout**
     - The length of time the driver tries to select a server before timing out.
     - ``TimeSpan``
     - 30 seconds
     - ``serverSelectionTimeoutMS=15000``

   * - **SocketTimeout**
     - The length of time the driver tries to send or receive on a socket before 
       timing out. Specifying ``0`` means no timeout.
     - ``TimeSpan``
     - OS default
     - ``socketTimeoutMS=0``

   * - **SrvMaxHosts**
     - The greatest number of SRV results to randomly select when initially populating 
       the seedlist or, during SRV polling, adding new hosts to the topology. 
       Specifying ``0`` means no maximum.
     - {+int-data-type+}
     - ``0``
     - ``srvMaxHosts=3``

   * - **SslSettings**
     - TLS/SSL options, including client certificates, revocation handling, and 
       enabled and disabled TLS/SSL protocols.
     - ``SslSettings``
     - ``null``
     - ``tlsDisableCertificateRevocationCheck=false``

   * - **UseTls**
     - Specifies whether to require TLS for connections to the server. If you use 
       a scheme of ``\"mongodb+srv\"`` or specify other TLS options, 
       this option defaults to ``true``.
     - {+bool-data-type+}
     - ``false``
     - ``tls=true`` or ``ssl=true``

   * - **WaitQueueTimeout**
     - The length of time the driver tries to check out a connection from a 
       server's connection pool before timing out. Specifying ``0`` means no timeout.
     - ``TimeSpan``
     - 2 minutes
     - ``waitQueueTimeoutMS=0``

   * - **WriteConcern**
     - The default write-concern settings, including write timeout and 
       journaling, for the client. Specifying ``0`` for the timeout means no timeout. 
       See :ref:`write concern <wc-j>` for more information.
     - ``WriteConcern``
     - ``Acknowledged``
     - .. code-block:: none
     
        w=majority
        &wTimeoutMS=0
        &journal=true

   * - **WriteEncoding**
     - Specifies whether UTF-8 string serialization is strict or lenient. With strict
       encoding, the driver will throw an exception when it encounters an invalid 
       UTF-8 byte sequence.
     - ``UTF8Encoding``
     - Strict encoding
     - {+not-available+}
