.. _csharp-tls:

==========================
Enable TLS on a Connection
==========================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this guide, you can learn how to connect to MongoDB instances with the
`TLS/SSL <https://en.wikipedia.org/wiki/Transport_Layer_Security>`__
security protocol using the underlying TLS/SSL support in the {+framework+}. To
configure your connection to use TLS/SSL, enable the TLS/SSL settings in either
the :ref:`connection string <csharp-connection-uri>` or 
:ref:`MongoClientSettings <csharp-mongo-client-settings>`.

.. _csharp-tls-enable:

Enable TLS
----------

You can enable TLS for the connection to your MongoDB instance
in two different ways: using a property on a ``MongoClientSettings`` object or
through a parameter in your connection string.

.. tabs::

   .. tab:: MongoClientSettings
      :tabid: mongoclientsettings

      To enable TLS with a ``MongoClientSettings`` object, set the ``UseTls`` property
      to ``true``:

      .. code-block:: csharp

         var settings = new MongoClientSettings() { UseTls = true };
         var client = new MongoClient(settings);

   .. tab:: Connection String
      :tabid: connectionstring

      To enable TLS with a connection string, assign the 
      parameter ``tls`` a value of ``true`` in the connection string passed to the
      ``MongoClient`` constructor:

      .. code-block:: csharp

         var mongoClient = new MongoClient("mongodb://user1:password1@sample.host:27017?tls=true");

Configure a Client Certificate
------------------------------

You can configure your X.509 certificate using ``MongoClientSettings``. The following
code sample creates a new X.509 certificate object using the certificate file named 
``"client.pfx``, which is protected by the password ``mySuperSecretPassword``. The code
then adds this certificate to the ``SslSettings.ClientCertificates`` array in 
``MongoClientSettings``.

.. code-block:: csharp

   var cert = new X509Certificate2("client.pfx", "mySuperSecretPassword");

   var settings = new MongoClientSettings
   {
      SslSettings = new SslSettings
      {
         ClientCertificates = new[] { cert }
      },
      UseTls = true
   };

.. note:: 

   When loading a certificate with a password, the certificate object must contain a private 
   key. If it doesn't, your certificate will not be passed to the server.

Allow Insecure TLS
------------------

When TLS is enabled, the {+driver-short+} automatically verifies the certificate
the server presents. When testing your code, you can disable certificate verification;
this is known as *insecure TLS.* 

When using insecure TLS, the only requirement is that the server present an X.509 
certificate. The driver will accept a certificate even if any of the following are true: 

- The hostname of the server and the subject name (or subject alternative name) 
  on the certificate don't match.
- The certificate is expired or not yet valid. 
- The certificate doesn't have a trusted root certificate in the chain. 
- The certificate purpose isn't valid for server identification.

You can disable certificate verification in two different ways: using a property on a 
``MongoClientSettings`` object or through a parameter in your connection string.

.. tabs::

   .. tab:: MongoClientSettings
      :tabid: mongoclientsettings

      To turn off automatic certificate verification with a ``MongoClientSettings`` 
      object, set the ``AllowInsecureTls`` property to ``true``:

      .. code-block:: csharp
         :emphasize-lines: 4

         var settings = new MongoClientSettings 
         { 
            UseTls = true,
            AllowInsecureTls = true 
         };
         var client = new MongoClient(settings);
      
   .. tab:: Connection String
      :tabid: connectionstring

      To turn off automatic certificate verification using a connection string, 
      assign the connection string parameter ``tlsInsecure`` a value of ``true``:

      .. code-block:: csharp

         var mongoClient = new MongoClient("mongodb://user1:password1@sample.host:27017?tls=true&tlsInsecure=true");
      
.. warning::

   Always set this option to ``false`` in production. For security reasons, it's 
   important that the server certificate is properly validated.

.. _tls_configure-certificates:

Checking Certificate Revocation
-------------------------------

When an X.509 certificate should no longer be trusted--for example, if its private key
has been compromised--the certificate authority will revoke the certificate. 

By default, the {+driver-short+} doesn't check certificate revocation when it connects
to a server. You can enable revocation checking using either ``MongoClientSettings`` 
or the connection string.

.. tabs::

   .. tab::
      :tabid: mongoclientsettings

      To enable revocation checking using ``MongoClientSettings``, set 
      ``SslSettings.CheckCertificateRevocation`` to ``true``:

      .. code-block:: csharp
         :emphasize-lines: 5

         var settings = new MongoClientSettings
         {
            SslSettings = new SslSettings
            {
               CheckCertificateRevocation = true
            },
            UseTls = true
         };

   .. tab::
      :tabid: connectionstring

      To enable revocation checking using a connection string, 
      assign the connection string parameter ``tlsDisableCertificateRevocationCheck`` 
      a value of ``false``:

      .. code-block:: csharp

         var mongoClient = new MongoClient("mongodb://user1:password1@sample.host:27017?tls=true&tlsDisableCertificateRevocationCheck=false");

.. note::

   The {+driver-short+} doesn't check revocation by default because this is the default
   behavior of the ``SslStream`` class in both the 
   `{+framework+} <https://learn.microsoft.com/en-us/dotnet/api/system.net.security.sslstream.authenticateasclient?view=netframework-{+framework-version+}#System_Net_Security_SslStream_AuthenticateAsClient_System_String_>`__ 
   and the `.NET standard. <https://learn.microsoft.com/en-us/dotnet/api/system.net.security.sslstream.authenticateasclient?view=netstandard-{+standard-version+}#System_Net_Security_SslStream_AuthenticateAsClient_System_String_>`__

Feature Support by Operating System
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The {+driver-short+} handles revocation checking differently on different 
operating systems. The following tables show the {+driver-short+}'s support for 
revocation-checking mechanisms for recent versions of .NET on Windows, macOS, and Linux:

- Support for the **:wikipedia:`Online Certificate Status Protocol (OCSP) <Online_certificate_status_protocol>`**,
  a common mechanism for checking revocation 
- Support for **OCSP stapling**, a mechanism in which the server includes a time-stamped OCSP response
  to the client along with the certificate
- Support for **:wikipedia:`certificate revocation lists (CRLs), <Certificate_revocation_list>`**,
  an alternative to OCSP


Windows
```````

.. list-table::
   :widths: 25 25 25 25
   :header-rows: 1

   * - .NET version
     - OCSP
     - OCSP Stapling
     - CRLs Without OCSP

   * - .NET Framework 4.8
     - ✓
     - ✓
     - ✓

   * - .NET Framework 4.7
     - ✓
     - ✓
     - ✓

   * - .NET Framework 4.6
     - ✓
     - ✓
     - ✓
   
   * - .NET Framework 4.5
     - ✓
     - ✓
     - ✓
   
   * - .NET Core 3.1
     - ✓
     - ✓
     - ✓

   * - .NET Core 3.0
     - ✓
     - ✓
     - ✓

   * - .NET Core 2.2
     - ✓
     - ✓
     - ✓

   * - .NET Core 2.1
     - ✓
     - ✓
     - ✓
   
   * - .NET Core 2.0
     - ✓
     - ✓
     - ✓

.. warning:: Hard Fail on Windows

   On Windows, if the OCSP responder is unavailable, the driver reports a "hard fail" and
   fails to connect to the server. This differs from the "soft fail" behavior of other 
   operating systems and drivers, which will allow the connection to continue.

macOS
`````

.. list-table::
   :widths: 25 25 25 25
   :header-rows: 1

   * - .NET version
     - OCSP
     - OCSP Stapling
     - CRLs Without OCSP
   
   * - .NET Core 3.1
     - ✓
     - ✓
     - 

   * - .NET Core 3.0
     - ✓
     - ✓
     - 

   * - .NET Core 2.2
     - ✓
     - ✓
     - 

   * - .NET Core 2.1
     - ✓
     - ✓
     - 
   
   * - .NET Core 2.0
     - ✓
     - ✓
     - 

Linux
`````

.. list-table::
   :widths: 25 25 25 25
   :header-rows: 1

   * - .NET version
     - OCSP
     - OCSP Stapling
     - CRLs Without OCSP
   
   * - .NET Core 3.1
     - ✓
     - ✓
     - ✓

   * - .NET Core 3.0
     - ✓
     - ✓
     - ✓

   * - .NET Core 2.2
     - ✓
     - ✓
     - ✓

   * - .NET Core 2.1
     - ✓
     - ✓
     - ✓
   
   * - .NET Core 2.0
     - ✓
     - ✓
     - ✓


For more information about OCSP, see the 
:rfc:`Official IETF specification for OCSP (RFC 6960). <6960>`

