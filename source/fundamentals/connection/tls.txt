.. _csharp-tls:

==========================
Enable TLS on a Connection
==========================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this guide, you can learn how to connect to MongoDB instances with the
`TLS/SSL <https://en.wikipedia.org/wiki/Transport_Layer_Security>`__
security protocol using the underlying TLS/SSL support in the {+framework+}. To
configure your connection to use TLS/SSL, enable the TLS/SSL settings in either
the :ref:`connection string <csharp-connection-uri>` or 
:ref:`MongoClientSettings <csharp-mongo-client-settings>`.

.. _csharp-tls-enable:

Enable TLS
----------

You can enable TLS for the connection to your MongoDB instance
in two different ways: using a property on a ``MongoClientSettings`` object or
through a parameter in your connection string.

.. tabs::

   .. tab:: MongoClientSettings
      :tabid: mongoclientsettings

      To enable TLS with a ``MongoClientSettings`` object, set the ``UseTls`` property
      to ``true``:

      .. code-block:: csharp

         var settings = new MongoClientSettings() { UseTls = true };
         var client = new MongoClient(settings);

   .. tab:: Connection String
      :tabid: connectionstring

      To enable TLS with a connection string, assign the 
      parameter ``tls`` a value of ``true`` in the connection string passed to the
      ``MongoClient`` constructor:

      .. code-block:: csharp

         var mongoClient = new MongoClient("mongodb://user1:password1@sample.host:27017?tls=true");

Allow Insecure TLS
------------------

When TLS is enabled, the {+driver-short+} automatically verifies the certificate
the server presents. When testing your code, you can disable certificate verification;
this is known as "insecure mode." In insecure mode, the only requirement is that the 
server present an X.509 certificate. The driver will accept a certificate even if any of the 
following are true: 

- The hostname of the server and the subject name (or subject alternative name) 
  on the certificate don't match.
- The certificate is expired or not yet valid. 
- The certificate doesn't have a trusted root certificate in the chain. 
- The certificate purpose isn't valid for server identification.

You can allow insecure TLS in two different ways: using a property on a 
``MongoClientSettings`` object or through a parameter in your connection string.

.. tabs::

   .. tab:: MongoClientSettings
      :tabid: mongoclientsettings

      To turn off automatic certificate verification with a ``MongoClientSettings`` 
      object, set the ``AllowInsecureTls`` property to ``true``:

      .. code-block:: csharp
         :emphasize-lines: 4

         var settings = new MongoClientSettings 
         { 
            UseTls = true,
            AllowInsecureTls = true 
         };
         var client = new MongoClient(settings);
      
   .. tab:: Connection String
      :tabid: connectionstring

      To turn off automatic certificate verification using a connection string, 
      assign the connection string parameter ``tlsInsecure`` a value of ``true``:

      .. code-block:: csharp

         var mongoClient = new MongoClient("mongodb://user1:password1@sample.host:27017?tls=true&tlsInsecure=true");
      
.. warning::

   Always set this option to ``false`` in production. For security reasons, it's 
   important that the server certificate is properly validated.

.. _tls_configure-certificates:

Checking Certificate Revocation
-------------------------------

A certificate authority can add an X.509 certificate to its :wikipedia:`Certificate 
Revocation List (CRL) <Certificate_revocation_list>` to invalidate the certificate. 
By default, the {+driver-short+} doesn't check certificate revocation, but you can 
enable revocation checking using either ``MongoClientSettings`` or the connection string.

.. tabs::

   .. tab::
      :tabid: mongoclientsettings

      To enable revocation checking using ``MongoClientSettings``, set 
      ``SslSettings.CheckCertificateRevocation`` to ``true``:

      .. code-block:: csharp
         :emphasize-lines: 5

         var settings = new MongoClientSettings
         {
            SslSettings = new SslSettings
            {
               CheckCertificateRevocation = true
            },
            UseTls = true
         };

   .. tab::
      :tabid: connectionstring

      To enable revocation checking using a connection string, 
      assign the connection string parameter ``tlsDisableCertificateRevocationCheck`` 
      a value of ``false``:

      .. code-block:: csharp

         var mongoClient = new MongoClient("mongodb://user1:password1@sample.host:27017?tls=true&tlsDisableCertificateRevocationCheck=false");

.. note::

   The {+driver-short+} doesn't check revocation by default because this is the default
   behavior of the ``SslStream`` class in both the 
   `{+framework+} <https://learn.microsoft.com/en-us/dotnet/api/system.net.security.sslstream.authenticateasclient?view=netframework-{+framework-version+}#System_Net_Security_SslStream_AuthenticateAsClient_System_String_>`__ 
   and the `.NET standard. <https://learn.microsoft.com/en-us/dotnet/api/system.net.security.sslstream.authenticateasclient?view=netstandard-{+standard-version+}#System_Net_Security_SslStream_AuthenticateAsClient_System_String_>`__

Online Certificate Status Protocol (OCSP)
-----------------------------------------

Certificate revocation is handled by OCSP, a standard used to check whether 
X.509 certificates have been revoked.  When a client sends an X.509 certificate during the TLS
handshake, the CA's revocation server checks the CRL and returns a status
of "good", "revoked", or "unknown".

The driver supports the following variations of OCSP:

- **Client-Driven OCSP**
- **OCSP Stapling**

The following sections describe the differences between them and how to enable
them for your application.

Client-Driven OCSP
~~~~~~~~~~~~~~~~~~

In client-driven OCSP, the client sends the certificate in an OCSP request to
an OCSP responder after receiving the certificate from the server. The OCSP
responder checks the status of the certificate with a certificate
authority (CA) and reports whether it's valid in a response sent to the
client.

To enable client-driven OCSP for your application, set the following JVM
system properties:

.. list-table::
   :header-rows: 1
   :widths: 35 65

   * - Property
     - Value

   * - ``com.sun.net.ssl.checkRevocation``
     - Set this property to ``true`` to enable revocation checking.

   * - ``ocsp.enable``
     - Set this property to ``true`` to enable client-driven OCSP.

.. warning::

   If the OCSP responder is unavailable, the TLS support provided by the
   JDK reports a "hard fail". This differs from the "soft fail" behavior of
   the MongoDB Shell and some other drivers.

OCSP Stapling
~~~~~~~~~~~~~

OCSP stapling is a mechanism in which the server must obtain the signed
certificate from the certificate authority (CA) and include it in a
time-stamped OCSP response to the client.

To enable OCSP stapling for your application, set the following JVM system
properties:

.. list-table::
   :header-rows: 1
   :widths: 50 50

   * - Property
     - Description

   * - ``com.sun.net.ssl.checkRevocation``
     - Set this property to ``true`` to enable revocation checking.

   * - ``jdk.tls.client.enableStatusRequestExtension``
     - | Set this property to ``true`` to enable OCSP stapling.
       |
       | If unset or set to ``false``, the connection can proceed regardless of the presence or status of the certificate revocation response.

For additional information about OCSP, check out the following resources:

- Oracle JDK 8 Documentation on `how to enable OCSP for an application <https://docs.oracle.com/javase/8/docs/technotes/guides/security/jsse/ocsp.html>`__
- :rfc:`Official IETF specification for OCSP (RFC 6960) <6960>`


Configure the Client Certificate
--------------------------------

You can configure your X.509 certificate using ``MongoClientSettings``. The following
code sample creates a new X.509 certificate object using the certificate file named 
``"client.pfx``, which is protected by the password ``mySuperSecretPassword``. The code
then adds this certificate to the ``SslSettings.ClientCertificates`` array in 
``MongoClientSettings``.

.. code-block:: csharp

   var cert = new X509Certificate2("client.pfx", "mySuperSecretPassword");

   var settings = new MongoClientSettings
   {
      SslSettings = new SslSettings
      {
         ClientCertificates = new[] { cert }
      },
      UseTls = true
   };

.. note:: 

   When loading a certificate with a password, the certificate object must contain a private 
   key. If it doesn't, your certificate will not be passed to the server.
